<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="4366"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (1 samples, 0.02%)</title><rect x="0.0000%" y="309" width="0.0229%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="0.0000%" y="293" width="0.0229%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (4 samples, 0.09%)</title><rect x="0.0229%" y="197" width="0.0916%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="4"/><text x="0.2729%" y="207.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (4 samples, 0.09%)</title><rect x="0.1145%" y="197" width="0.0916%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="4"/><text x="0.3645%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.05%)</title><rect x="2.8630%" y="181" width="0.0458%" height="15" fill="rgb(208,68,35)" fg:x="125" fg:w="2"/><text x="3.1130%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.05%)</title><rect x="2.9088%" y="181" width="0.0458%" height="15" fill="rgb(232,128,0)" fg:x="127" fg:w="2"/><text x="3.1588%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (5 samples, 0.11%)</title><rect x="2.9546%" y="181" width="0.1145%" height="15" fill="rgb(207,160,47)" fg:x="129" fg:w="5"/><text x="3.2046%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="3.0692%" y="181" width="0.0229%" height="15" fill="rgb(228,23,34)" fg:x="134" fg:w="1"/><text x="3.3192%" y="191.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.41%)</title><rect x="3.0921%" y="181" width="0.4123%" height="15" fill="rgb(218,30,26)" fg:x="135" fg:w="18"/><text x="3.3421%" y="191.50"></text></g><g><title>lox`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="3.5044%" y="181" width="0.0229%" height="15" fill="rgb(220,122,19)" fg:x="153" fg:w="1"/><text x="3.7544%" y="191.50"></text></g><g><title>lox`__rdl_dealloc (7 samples, 0.16%)</title><rect x="3.5273%" y="181" width="0.1603%" height="15" fill="rgb(250,228,42)" fg:x="154" fg:w="7"/><text x="3.7773%" y="191.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;core::result::Result&lt;lox::runtime::value::Value,lox::runtime::interpreter::LoxControlFlow&gt;&gt; (4 samples, 0.09%)</title><rect x="3.6876%" y="181" width="0.0916%" height="15" fill="rgb(240,193,28)" fg:x="161" fg:w="4"/><text x="3.9376%" y="191.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (69 samples, 1.58%)</title><rect x="3.7792%" y="181" width="1.5804%" height="15" fill="rgb(216,20,37)" fg:x="165" fg:w="69"/><text x="4.0292%" y="191.50"></text></g><g><title>lox`lox::runtime::environment::Env::new (3 samples, 0.07%)</title><rect x="5.3596%" y="181" width="0.0687%" height="15" fill="rgb(206,188,39)" fg:x="234" fg:w="3"/><text x="5.6096%" y="191.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (35 samples, 0.80%)</title><rect x="9.2075%" y="165" width="0.8016%" height="15" fill="rgb(217,207,13)" fg:x="402" fg:w="35"/><text x="9.4575%" y="175.50"></text></g><g><title>lox`lox::runtime::environment::Env::get_at (1 samples, 0.02%)</title><rect x="10.0092%" y="165" width="0.0229%" height="15" fill="rgb(231,73,38)" fg:x="437" fg:w="1"/><text x="10.2592%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (2 samples, 0.05%)</title><rect x="12.6432%" y="133" width="0.0458%" height="15" fill="rgb(225,20,46)" fg:x="552" fg:w="2"/><text x="12.8932%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.02%)</title><rect x="12.6890%" y="133" width="0.0229%" height="15" fill="rgb(210,31,41)" fg:x="554" fg:w="1"/><text x="12.9390%" y="143.50"></text></g><g><title>lox`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="12.7119%" y="133" width="0.0229%" height="15" fill="rgb(221,200,47)" fg:x="555" fg:w="1"/><text x="12.9619%" y="143.50"></text></g><g><title>lox`hashbrown::map::make_hash (2 samples, 0.05%)</title><rect x="12.7348%" y="133" width="0.0458%" height="15" fill="rgb(226,26,5)" fg:x="556" fg:w="2"/><text x="12.9848%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (15 samples, 0.34%)</title><rect x="16.1475%" y="117" width="0.3436%" height="15" fill="rgb(249,33,26)" fg:x="705" fg:w="15"/><text x="16.3975%" y="127.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.18%)</title><rect x="16.4911%" y="117" width="0.1832%" height="15" fill="rgb(235,183,28)" fg:x="720" fg:w="8"/><text x="16.7411%" y="127.50"></text></g><g><title>lox`lox::runtime::environment::Env::get_at (354 samples, 8.11%)</title><rect x="12.1622%" y="149" width="8.1081%" height="15" fill="rgb(221,5,38)" fg:x="531" fg:w="354"/><text x="12.4122%" y="159.50">lox`lox::ru..</text></g><g><title>lox`lox::runtime::environment::EnvInner::fetch (327 samples, 7.49%)</title><rect x="12.7806%" y="133" width="7.4897%" height="15" fill="rgb(247,18,42)" fg:x="558" fg:w="327"/><text x="13.0306%" y="143.50">lox`lox::r..</text></g><g><title>lox`hashbrown::map::make_hash (157 samples, 3.60%)</title><rect x="16.6743%" y="117" width="3.5960%" height="15" fill="rgb(241,131,45)" fg:x="728" fg:w="157"/><text x="16.9243%" y="127.50">lox`..</text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (46 samples, 1.05%)</title><rect x="19.2167%" y="101" width="1.0536%" height="15" fill="rgb(249,31,29)" fg:x="839" fg:w="46"/><text x="19.4667%" y="111.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (652 samples, 14.93%)</title><rect x="5.4283%" y="181" width="14.9336%" height="15" fill="rgb(225,111,53)" fg:x="237" fg:w="652"/><text x="5.6783%" y="191.50">lox`lox::runtime::inter..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (451 samples, 10.33%)</title><rect x="10.0321%" y="165" width="10.3298%" height="15" fill="rgb(238,160,17)" fg:x="438" fg:w="451"/><text x="10.2821%" y="175.50">lox`lox::runtim..</text></g><g><title>lox`lox::runtime::environment::EnvInner::fetch (4 samples, 0.09%)</title><rect x="20.2703%" y="149" width="0.0916%" height="15" fill="rgb(214,148,48)" fg:x="885" fg:w="4"/><text x="20.5203%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.16%)</title><rect x="23.8204%" y="165" width="0.1603%" height="15" fill="rgb(232,36,49)" fg:x="1040" fg:w="7"/><text x="24.0704%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.16%)</title><rect x="23.9808%" y="165" width="0.1603%" height="15" fill="rgb(209,103,24)" fg:x="1047" fg:w="7"/><text x="24.2308%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (125 samples, 2.86%)</title><rect x="25.1489%" y="149" width="2.8630%" height="15" fill="rgb(229,88,8)" fg:x="1098" fg:w="125"/><text x="25.3989%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`free (175 samples, 4.01%)</title><rect x="24.1411%" y="165" width="4.0082%" height="15" fill="rgb(213,181,19)" fg:x="1054" fg:w="175"/><text x="24.3911%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.14%)</title><rect x="28.0119%" y="149" width="0.1374%" height="15" fill="rgb(254,191,54)" fg:x="1223" fg:w="6"/><text x="28.2619%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.05%)</title><rect x="28.1493%" y="165" width="0.0458%" height="15" fill="rgb(241,83,37)" fg:x="1229" fg:w="2"/><text x="28.3993%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (22 samples, 0.50%)</title><rect x="28.1951%" y="165" width="0.5039%" height="15" fill="rgb(233,36,39)" fg:x="1231" fg:w="22"/><text x="28.4451%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (116 samples, 2.66%)</title><rect x="28.6990%" y="165" width="2.6569%" height="15" fill="rgb(226,3,54)" fg:x="1253" fg:w="116"/><text x="28.9490%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.30%)</title><rect x="31.3559%" y="165" width="0.2978%" height="15" fill="rgb(245,192,40)" fg:x="1369" fg:w="13"/><text x="31.6059%" y="175.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.23%)</title><rect x="32.6386%" y="149" width="0.2290%" height="15" fill="rgb(238,167,29)" fg:x="1425" fg:w="10"/><text x="32.8886%" y="159.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 1.63%)</title><rect x="31.6537%" y="165" width="1.6262%" height="15" fill="rgb(232,182,51)" fg:x="1382" fg:w="71"/><text x="31.9037%" y="175.50"></text></g><g><title>lox`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.41%)</title><rect x="32.8676%" y="149" width="0.4123%" height="15" fill="rgb(231,60,39)" fg:x="1435" fg:w="18"/><text x="33.1176%" y="159.50"></text></g><g><title>lox`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="33.2799%" y="165" width="0.1374%" height="15" fill="rgb(208,69,12)" fg:x="1453" fg:w="6"/><text x="33.5299%" y="175.50"></text></g><g><title>lox`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="33.4173%" y="165" width="0.0229%" height="15" fill="rgb(235,93,37)" fg:x="1459" fg:w="1"/><text x="33.6673%" y="175.50"></text></g><g><title>lox`__rdl_alloc (14 samples, 0.32%)</title><rect x="33.4402%" y="165" width="0.3207%" height="15" fill="rgb(213,116,39)" fg:x="1460" fg:w="14"/><text x="33.6902%" y="175.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;core::result::Result&lt;lox::runtime::value::Value,lox::runtime::interpreter::LoxControlFlow&gt;&gt; (8 samples, 0.18%)</title><rect x="33.7609%" y="165" width="0.1832%" height="15" fill="rgb(222,207,29)" fg:x="1474" fg:w="8"/><text x="34.0109%" y="175.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (30 samples, 0.69%)</title><rect x="33.9441%" y="165" width="0.6871%" height="15" fill="rgb(206,96,30)" fg:x="1482" fg:w="30"/><text x="34.1941%" y="175.50"></text></g><g><title>lox`hashbrown::raw::sse2::Group::static_empty (3 samples, 0.07%)</title><rect x="34.6312%" y="165" width="0.0687%" height="15" fill="rgb(218,138,4)" fg:x="1512" fg:w="3"/><text x="34.8812%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.07%)</title><rect x="36.8071%" y="133" width="0.0687%" height="15" fill="rgb(250,191,14)" fg:x="1607" fg:w="3"/><text x="37.0571%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (206 samples, 4.72%)</title><rect x="37.2652%" y="117" width="4.7183%" height="15" fill="rgb(239,60,40)" fg:x="1627" fg:w="206"/><text x="37.5152%" y="127.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (92 samples, 2.11%)</title><rect x="39.8763%" y="101" width="2.1072%" height="15" fill="rgb(206,27,48)" fg:x="1741" fg:w="92"/><text x="40.1263%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (265 samples, 6.07%)</title><rect x="35.9597%" y="149" width="6.0696%" height="15" fill="rgb(225,35,8)" fg:x="1570" fg:w="265"/><text x="36.2097%" y="159.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (225 samples, 5.15%)</title><rect x="36.8759%" y="133" width="5.1535%" height="15" fill="rgb(250,213,24)" fg:x="1610" fg:w="225"/><text x="37.1259%" y="143.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.05%)</title><rect x="41.9835%" y="117" width="0.0458%" height="15" fill="rgb(247,123,22)" fg:x="1833" fg:w="2"/><text x="42.2335%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.14%)</title><rect x="42.0293%" y="149" width="0.1374%" height="15" fill="rgb(231,138,38)" fg:x="1835" fg:w="6"/><text x="42.2793%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="42.1667%" y="149" width="0.0687%" height="15" fill="rgb(231,145,46)" fg:x="1841" fg:w="3"/><text x="42.4167%" y="159.50"></text></g><g><title>lox`lox::runtime::environment::Env::new (331 samples, 7.58%)</title><rect x="34.7000%" y="165" width="7.5813%" height="15" fill="rgb(251,118,11)" fg:x="1515" fg:w="331"/><text x="34.9500%" y="175.50">lox`lox::r..</text></g><g><title>lox`hashbrown::raw::sse2::Group::static_empty (2 samples, 0.05%)</title><rect x="42.2355%" y="149" width="0.0458%" height="15" fill="rgb(217,147,25)" fg:x="1844" fg:w="2"/><text x="42.4855%" y="159.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (2 samples, 0.05%)</title><rect x="42.2813%" y="165" width="0.0458%" height="15" fill="rgb(247,81,37)" fg:x="1846" fg:w="2"/><text x="42.5313%" y="175.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (37 samples, 0.85%)</title><rect x="43.9762%" y="149" width="0.8475%" height="15" fill="rgb(209,12,38)" fg:x="1920" fg:w="37"/><text x="44.2262%" y="159.50"></text></g><g><title>lox`lox::runtime::environment::Env::assign (2 samples, 0.05%)</title><rect x="44.8236%" y="149" width="0.0458%" height="15" fill="rgb(227,1,9)" fg:x="1957" fg:w="2"/><text x="45.0736%" y="159.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (26 samples, 0.60%)</title><rect x="46.1979%" y="133" width="0.5955%" height="15" fill="rgb(248,47,43)" fg:x="2017" fg:w="26"/><text x="46.4479%" y="143.50"></text></g><g><title>lox`hashbrown::map::make_hash (2 samples, 0.05%)</title><rect x="46.7934%" y="133" width="0.0458%" height="15" fill="rgb(221,10,30)" fg:x="2043" fg:w="2"/><text x="47.0434%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.18%)</title><rect x="49.0609%" y="117" width="0.1832%" height="15" fill="rgb(210,229,1)" fg:x="2142" fg:w="8"/><text x="49.3109%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.11%)</title><rect x="49.2442%" y="117" width="0.1145%" height="15" fill="rgb(222,148,37)" fg:x="2150" fg:w="5"/><text x="49.4942%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (2 samples, 0.05%)</title><rect x="49.3587%" y="117" width="0.0458%" height="15" fill="rgb(234,67,33)" fg:x="2155" fg:w="2"/><text x="49.6087%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (4 samples, 0.09%)</title><rect x="49.4045%" y="117" width="0.0916%" height="15" fill="rgb(247,98,35)" fg:x="2157" fg:w="4"/><text x="49.6545%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.02%)</title><rect x="49.4961%" y="117" width="0.0229%" height="15" fill="rgb(247,138,52)" fg:x="2161" fg:w="1"/><text x="49.7461%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.11%)</title><rect x="49.5190%" y="117" width="0.1145%" height="15" fill="rgb(213,79,30)" fg:x="2162" fg:w="5"/><text x="49.7690%" y="127.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.21%)</title><rect x="49.6335%" y="117" width="0.2061%" height="15" fill="rgb(246,177,23)" fg:x="2167" fg:w="9"/><text x="49.8835%" y="127.50"></text></g><g><title>lox`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="49.8397%" y="117" width="0.0229%" height="15" fill="rgb(230,62,27)" fg:x="2176" fg:w="1"/><text x="50.0897%" y="127.50"></text></g><g><title>lox`__rdl_alloc (7 samples, 0.16%)</title><rect x="49.8626%" y="117" width="0.1603%" height="15" fill="rgb(216,154,8)" fg:x="2177" fg:w="7"/><text x="50.1126%" y="127.50"></text></g><g><title>lox`__rust_alloc (4 samples, 0.09%)</title><rect x="50.0229%" y="117" width="0.0916%" height="15" fill="rgb(244,35,45)" fg:x="2184" fg:w="4"/><text x="50.2729%" y="127.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;core::option::Option&lt;lox::runtime::value::Value&gt;&gt; (7 samples, 0.16%)</title><rect x="50.1145%" y="117" width="0.1603%" height="15" fill="rgb(251,115,12)" fg:x="2188" fg:w="7"/><text x="50.3645%" y="127.50"></text></g><g><title>lox`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.05%)</title><rect x="50.2749%" y="117" width="0.0458%" height="15" fill="rgb(240,54,50)" fg:x="2195" fg:w="2"/><text x="50.5249%" y="127.50"></text></g><g><title>lox`hashbrown::map::make_hash (162 samples, 3.71%)</title><rect x="50.3207%" y="117" width="3.7105%" height="15" fill="rgb(233,84,52)" fg:x="2197" fg:w="162"/><text x="50.5707%" y="127.50">lox`..</text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (59 samples, 1.35%)</title><rect x="52.6798%" y="101" width="1.3514%" height="15" fill="rgb(207,117,47)" fg:x="2300" fg:w="59"/><text x="52.9298%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.05%)</title><rect x="59.0014%" y="85" width="0.0458%" height="15" fill="rgb(249,43,39)" fg:x="2576" fg:w="2"/><text x="59.2514%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (233 samples, 5.34%)</title><rect x="59.5282%" y="69" width="5.3367%" height="15" fill="rgb(209,38,44)" fg:x="2599" fg:w="233"/><text x="59.7782%" y="79.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (117 samples, 2.68%)</title><rect x="62.1851%" y="53" width="2.6798%" height="15" fill="rgb(236,212,23)" fg:x="2715" fg:w="117"/><text x="62.4351%" y="63.50">li..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (293 samples, 6.71%)</title><rect x="58.2684%" y="101" width="6.7109%" height="15" fill="rgb(242,79,21)" fg:x="2544" fg:w="293"/><text x="58.5184%" y="111.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (259 samples, 5.93%)</title><rect x="59.0472%" y="85" width="5.9322%" height="15" fill="rgb(211,96,35)" fg:x="2578" fg:w="259"/><text x="59.2972%" y="95.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (5 samples, 0.11%)</title><rect x="64.8649%" y="69" width="0.1145%" height="15" fill="rgb(253,215,40)" fg:x="2832" fg:w="5"/><text x="65.1149%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (9 samples, 0.21%)</title><rect x="64.9794%" y="101" width="0.2061%" height="15" fill="rgb(211,81,21)" fg:x="2837" fg:w="9"/><text x="65.2294%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.14%)</title><rect x="65.1855%" y="101" width="0.1374%" height="15" fill="rgb(208,190,38)" fg:x="2846" fg:w="6"/><text x="65.4355%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.09%)</title><rect x="65.3230%" y="101" width="0.0916%" height="15" fill="rgb(235,213,38)" fg:x="2852" fg:w="4"/><text x="65.5730%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.02%)</title><rect x="65.4146%" y="101" width="0.0229%" height="15" fill="rgb(237,122,38)" fg:x="2856" fg:w="1"/><text x="65.6646%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="65.4375%" y="101" width="0.0229%" height="15" fill="rgb(244,218,35)" fg:x="2857" fg:w="1"/><text x="65.6875%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (3 samples, 0.07%)</title><rect x="65.4604%" y="101" width="0.0687%" height="15" fill="rgb(240,68,47)" fg:x="2858" fg:w="3"/><text x="65.7104%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (16 samples, 0.37%)</title><rect x="65.5291%" y="101" width="0.3665%" height="15" fill="rgb(210,16,53)" fg:x="2861" fg:w="16"/><text x="65.7791%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.18%)</title><rect x="65.8956%" y="101" width="0.1832%" height="15" fill="rgb(235,124,12)" fg:x="2877" fg:w="8"/><text x="66.1456%" y="111.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.21%)</title><rect x="66.0788%" y="101" width="0.2061%" height="15" fill="rgb(224,169,11)" fg:x="2885" fg:w="9"/><text x="66.3288%" y="111.50"></text></g><g><title>lox`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="66.2849%" y="101" width="0.0229%" height="15" fill="rgb(250,166,2)" fg:x="2894" fg:w="1"/><text x="66.5349%" y="111.50"></text></g><g><title>lox`DYLD-STUB$$memcmp (4 samples, 0.09%)</title><rect x="66.3078%" y="101" width="0.0916%" height="15" fill="rgb(242,216,29)" fg:x="2895" fg:w="4"/><text x="66.5578%" y="111.50"></text></g><g><title>lox`__rdl_dealloc (6 samples, 0.14%)</title><rect x="66.3995%" y="101" width="0.1374%" height="15" fill="rgb(230,116,27)" fg:x="2899" fg:w="6"/><text x="66.6495%" y="111.50"></text></g><g><title>lox`__rust_dealloc (5 samples, 0.11%)</title><rect x="66.5369%" y="101" width="0.1145%" height="15" fill="rgb(228,99,48)" fg:x="2905" fg:w="5"/><text x="66.7869%" y="111.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;core::option::Option&lt;lox::runtime::value::Value&gt;&gt; (18 samples, 0.41%)</title><rect x="66.6514%" y="101" width="0.4123%" height="15" fill="rgb(253,11,6)" fg:x="2910" fg:w="18"/><text x="66.9014%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (105 samples, 2.40%)</title><rect x="72.5607%" y="69" width="2.4049%" height="15" fill="rgb(247,143,39)" fg:x="3168" fg:w="105"/><text x="72.8107%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`free (153 samples, 3.50%)</title><rect x="71.5529%" y="85" width="3.5044%" height="15" fill="rgb(236,97,10)" fg:x="3124" fg:w="153"/><text x="71.8029%" y="95.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.09%)</title><rect x="74.9656%" y="69" width="0.0916%" height="15" fill="rgb(233,208,19)" fg:x="3273" fg:w="4"/><text x="75.2156%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (29 samples, 0.66%)</title><rect x="75.0573%" y="85" width="0.6642%" height="15" fill="rgb(216,164,2)" fg:x="3277" fg:w="29"/><text x="75.3073%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (129 samples, 2.95%)</title><rect x="75.7215%" y="85" width="2.9546%" height="15" fill="rgb(220,129,5)" fg:x="3306" fg:w="129"/><text x="75.9715%" y="95.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.21%)</title><rect x="78.6761%" y="85" width="0.2061%" height="15" fill="rgb(242,17,10)" fg:x="3435" fg:w="9"/><text x="78.9261%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (8 samples, 0.18%)</title><rect x="78.8823%" y="85" width="0.1832%" height="15" fill="rgb(242,107,0)" fg:x="3444" fg:w="8"/><text x="79.1323%" y="95.50"></text></g><g><title>lox`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (575 samples, 13.17%)</title><rect x="67.0637%" y="101" width="13.1699%" height="15" fill="rgb(251,28,31)" fg:x="2928" fg:w="575"/><text x="67.3137%" y="111.50">lox`hashbrown::map::..</text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 1.17%)</title><rect x="79.0655%" y="85" width="1.1681%" height="15" fill="rgb(233,223,10)" fg:x="3452" fg:w="51"/><text x="79.3155%" y="95.50"></text></g><g><title>lox`lox::runtime::environment::Env::assign (1,597 samples, 36.58%)</title><rect x="46.8392%" y="133" width="36.5781%" height="15" fill="rgb(215,21,27)" fg:x="2045" fg:w="1597"/><text x="47.0892%" y="143.50">lox`lox::runtime::environment::Env::assign</text></g><g><title>lox`lox::runtime::environment::Env::assign (1,283 samples, 29.39%)</title><rect x="54.0311%" y="117" width="29.3862%" height="15" fill="rgb(232,23,21)" fg:x="2359" fg:w="1283"/><text x="54.2811%" y="127.50">lox`lox::runtime::environment::Env::assign</text></g><g><title>lox`hashbrown::map::make_hash (139 samples, 3.18%)</title><rect x="80.2336%" y="101" width="3.1837%" height="15" fill="rgb(244,5,23)" fg:x="3503" fg:w="139"/><text x="80.4836%" y="111.50">lox..</text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (54 samples, 1.24%)</title><rect x="82.1805%" y="85" width="1.2368%" height="15" fill="rgb(226,81,46)" fg:x="3588" fg:w="54"/><text x="82.4305%" y="95.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (43 samples, 0.98%)</title><rect x="87.4027%" y="117" width="0.9849%" height="15" fill="rgb(247,70,30)" fg:x="3816" fg:w="43"/><text x="87.6527%" y="127.50"></text></g><g><title>lox`lox::runtime::environment::Env::get_at (6 samples, 0.14%)</title><rect x="88.3875%" y="117" width="0.1374%" height="15" fill="rgb(212,68,19)" fg:x="3859" fg:w="6"/><text x="88.6375%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (8 samples, 0.18%)</title><rect x="92.0980%" y="69" width="0.1832%" height="15" fill="rgb(240,187,13)" fg:x="4021" fg:w="8"/><text x="92.3480%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2 samples, 0.05%)</title><rect x="92.2813%" y="69" width="0.0458%" height="15" fill="rgb(223,113,26)" fg:x="4029" fg:w="2"/><text x="92.5313%" y="79.50"></text></g><g><title>lox`DYLD-STUB$$memcmp (3 samples, 0.07%)</title><rect x="92.3271%" y="69" width="0.0687%" height="15" fill="rgb(206,192,2)" fg:x="4031" fg:w="3"/><text x="92.5771%" y="79.50"></text></g><g><title>lox`hashbrown::map::make_hash (7 samples, 0.16%)</title><rect x="92.3958%" y="69" width="0.1603%" height="15" fill="rgb(241,108,4)" fg:x="4034" fg:w="7"/><text x="92.6458%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (11 samples, 0.25%)</title><rect x="95.6711%" y="53" width="0.2519%" height="15" fill="rgb(247,173,49)" fg:x="4177" fg:w="11"/><text x="95.9211%" y="63.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.16%)</title><rect x="95.9230%" y="53" width="0.1603%" height="15" fill="rgb(224,114,35)" fg:x="4188" fg:w="7"/><text x="96.1730%" y="63.50"></text></g><g><title>lox`lox::runtime::environment::Env::get_at (366 samples, 8.38%)</title><rect x="91.5025%" y="85" width="8.3830%" height="15" fill="rgb(245,159,27)" fg:x="3995" fg:w="366"/><text x="91.7525%" y="95.50">lox`lox::run..</text></g><g><title>lox`lox::runtime::environment::EnvInner::fetch (320 samples, 7.33%)</title><rect x="92.5561%" y="69" width="7.3294%" height="15" fill="rgb(245,172,44)" fg:x="4041" fg:w="320"/><text x="92.8061%" y="79.50">lox`lox::r..</text></g><g><title>lox`hashbrown::map::make_hash (166 samples, 3.80%)</title><rect x="96.0834%" y="53" width="3.8021%" height="15" fill="rgb(236,23,11)" fg:x="4195" fg:w="166"/><text x="96.3334%" y="63.50">lox`..</text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 1.17%)</title><rect x="98.7174%" y="37" width="1.1681%" height="15" fill="rgb(205,117,38)" fg:x="4310" fg:w="51"/><text x="98.9674%" y="47.50"></text></g><g><title>all (4,366 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="4366"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (4,366 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="4366"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>lox`main (4,365 samples, 99.98%)</title><rect x="0.0229%" y="309" width="99.9771%" height="15" fill="rgb(217,125,39)" fg:x="1" fg:w="4365"/><text x="0.2729%" y="319.50">lox`main</text></g><g><title>lox`std::rt::lang_start_internal (4,365 samples, 99.98%)</title><rect x="0.0229%" y="293" width="99.9771%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="4365"/><text x="0.2729%" y="303.50">lox`std::rt::lang_start_internal</text></g><g><title>lox`std::rt::lang_start::_{{closure}} (4,365 samples, 99.98%)</title><rect x="0.0229%" y="277" width="99.9771%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="4365"/><text x="0.2729%" y="287.50">lox`std::rt::lang_start::_{{closure}}</text></g><g><title>lox`std::sys_common::backtrace::__rust_begin_short_backtrace (4,365 samples, 99.98%)</title><rect x="0.0229%" y="261" width="99.9771%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="4365"/><text x="0.2729%" y="271.50">lox`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lox`lox::main (4,365 samples, 99.98%)</title><rect x="0.0229%" y="245" width="99.9771%" height="15" fill="rgb(238,131,9)" fg:x="1" fg:w="4365"/><text x="0.2729%" y="255.50">lox`lox::main</text></g><g><title>lox`lox::Lox::run (4,365 samples, 99.98%)</title><rect x="0.0229%" y="229" width="99.9771%" height="15" fill="rgb(211,50,8)" fg:x="1" fg:w="4365"/><text x="0.2729%" y="239.50">lox`lox::Lox::run</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (4,365 samples, 99.98%)</title><rect x="0.0229%" y="213" width="99.9771%" height="15" fill="rgb(245,182,24)" fg:x="1" fg:w="4365"/><text x="0.2729%" y="223.50">lox`lox::runtime::interpreter::Interpreter::interpret</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (4,357 samples, 99.79%)</title><rect x="0.2061%" y="197" width="99.7939%" height="15" fill="rgb(242,14,37)" fg:x="9" fg:w="4357"/><text x="0.4561%" y="207.50">lox`lox::runtime::interpreter::Interpreter::interpret</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (3,477 samples, 79.64%)</title><rect x="20.3619%" y="181" width="79.6381%" height="15" fill="rgb(246,228,12)" fg:x="889" fg:w="3477"/><text x="20.6119%" y="191.50">lox`lox::runtime::interpreter::Interpreter::interpret</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (2,518 samples, 57.67%)</title><rect x="42.3271%" y="165" width="57.6729%" height="15" fill="rgb(213,55,15)" fg:x="1848" fg:w="2518"/><text x="42.5771%" y="175.50">lox`lox::runtime::interpreter::Interpreter::interpret</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (2,407 samples, 55.13%)</title><rect x="44.8694%" y="149" width="55.1306%" height="15" fill="rgb(209,9,3)" fg:x="1959" fg:w="2407"/><text x="45.1194%" y="159.50">lox`lox::runtime::interpreter::Interpreter::execute_expr</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (724 samples, 16.58%)</title><rect x="83.4173%" y="133" width="16.5827%" height="15" fill="rgb(230,59,30)" fg:x="3642" fg:w="724"/><text x="83.6673%" y="143.50">lox`lox::runtime::interpre..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (501 samples, 11.48%)</title><rect x="88.5250%" y="117" width="11.4750%" height="15" fill="rgb(209,121,21)" fg:x="3865" fg:w="501"/><text x="88.7750%" y="127.50">lox`lox::runtime:..</text></g><g><title>lox`lox::runtime::environment::Env::get_at (405 samples, 9.28%)</title><rect x="90.7238%" y="101" width="9.2762%" height="15" fill="rgb(220,109,13)" fg:x="3961" fg:w="405"/><text x="90.9738%" y="111.50">lox`lox::runt..</text></g><g><title>lox`lox::runtime::environment::EnvInner::fetch (5 samples, 0.11%)</title><rect x="99.8855%" y="85" width="0.1145%" height="15" fill="rgb(232,18,1)" fg:x="4361" fg:w="5"/><text x="100.1355%" y="95.50"></text></g></svg></svg>