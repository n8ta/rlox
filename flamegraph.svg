<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="1240"><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0000%" y="197" width="0.0806%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="3.6290%" y="181" width="0.4032%" height="15" fill="rgb(217,0,24)" fg:x="45" fg:w="5"/><text x="3.8790%" y="191.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (9 samples, 0.73%)</title><rect x="4.0323%" y="181" width="0.7258%" height="15" fill="rgb(221,193,54)" fg:x="50" fg:w="9"/><text x="4.2823%" y="191.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.9677%" y="165" width="0.0806%" height="15" fill="rgb(248,212,6)" fg:x="136" fg:w="1"/><text x="11.2177%" y="175.50"></text></g><g><title>lox`lox::runtime::fast_env::FastEnv::fetch (1 samples, 0.08%)</title><rect x="11.0484%" y="165" width="0.0806%" height="15" fill="rgb(208,68,35)" fg:x="137" fg:w="1"/><text x="11.2984%" y="175.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (66 samples, 5.32%)</title><rect x="11.1290%" y="165" width="5.3226%" height="15" fill="rgb(232,128,0)" fg:x="138" fg:w="66"/><text x="11.3790%" y="175.50">lox`lox..</text></g><g><title>lox`lox::runtime::fast_env::FastEnv::fetch (22 samples, 1.77%)</title><rect x="14.6774%" y="149" width="1.7742%" height="15" fill="rgb(207,160,47)" fg:x="182" fg:w="22"/><text x="14.9274%" y="159.50">l..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (170 samples, 13.71%)</title><rect x="4.7581%" y="181" width="13.7097%" height="15" fill="rgb(228,23,34)" fg:x="59" fg:w="170"/><text x="5.0081%" y="191.50">lox`lox::runtime::int..</text></g><g><title>lox`lox::runtime::interpreter::is_num (25 samples, 2.02%)</title><rect x="16.4516%" y="165" width="2.0161%" height="15" fill="rgb(218,30,26)" fg:x="204" fg:w="25"/><text x="16.7016%" y="175.50">l..</text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (10 samples, 0.81%)</title><rect x="17.6613%" y="149" width="0.8065%" height="15" fill="rgb(220,122,19)" fg:x="219" fg:w="10"/><text x="17.9113%" y="159.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (2 samples, 0.16%)</title><rect x="18.4677%" y="181" width="0.1613%" height="15" fill="rgb(250,228,42)" fg:x="229" fg:w="2"/><text x="18.7177%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.32%)</title><rect x="22.2581%" y="165" width="0.3226%" height="15" fill="rgb(240,193,28)" fg:x="276" fg:w="4"/><text x="22.5081%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.56%)</title><rect x="22.5806%" y="165" width="0.5645%" height="15" fill="rgb(216,20,37)" fg:x="280" fg:w="7"/><text x="22.8306%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.16%)</title><rect x="23.1452%" y="165" width="0.1613%" height="15" fill="rgb(206,188,39)" fg:x="287" fg:w="2"/><text x="23.3952%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (1 samples, 0.08%)</title><rect x="23.3065%" y="165" width="0.0806%" height="15" fill="rgb(217,207,13)" fg:x="289" fg:w="1"/><text x="23.5565%" y="175.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="23.3871%" y="165" width="0.5645%" height="15" fill="rgb(231,73,38)" fg:x="290" fg:w="7"/><text x="23.6371%" y="175.50"></text></g><g><title>lox`__rdl_dealloc (3 samples, 0.24%)</title><rect x="23.9516%" y="165" width="0.2419%" height="15" fill="rgb(225,20,46)" fg:x="297" fg:w="3"/><text x="24.2016%" y="175.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (20 samples, 1.61%)</title><rect x="24.1935%" y="165" width="1.6129%" height="15" fill="rgb(210,31,41)" fg:x="300" fg:w="20"/><text x="24.4435%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (60 samples, 4.84%)</title><rect x="29.8387%" y="133" width="4.8387%" height="15" fill="rgb(221,200,47)" fg:x="370" fg:w="60"/><text x="30.0887%" y="143.50">libsys..</text></g><g><title>libsystem_malloc.dylib`free (83 samples, 6.69%)</title><rect x="28.3065%" y="149" width="6.6935%" height="15" fill="rgb(226,26,5)" fg:x="351" fg:w="83"/><text x="28.5565%" y="159.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.32%)</title><rect x="34.6774%" y="133" width="0.3226%" height="15" fill="rgb(249,33,26)" fg:x="430" fg:w="4"/><text x="34.9274%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.81%)</title><rect x="35.0000%" y="149" width="0.8065%" height="15" fill="rgb(235,183,28)" fg:x="434" fg:w="10"/><text x="35.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (74 samples, 5.97%)</title><rect x="35.8065%" y="149" width="5.9677%" height="15" fill="rgb(221,5,38)" fg:x="444" fg:w="74"/><text x="36.0565%" y="159.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.65%)</title><rect x="41.7742%" y="149" width="0.6452%" height="15" fill="rgb(247,18,42)" fg:x="518" fg:w="8"/><text x="42.0242%" y="159.50"></text></g><g><title>lox`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="43.7903%" y="133" width="0.5645%" height="15" fill="rgb(241,131,45)" fg:x="543" fg:w="7"/><text x="44.0403%" y="143.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 2.90%)</title><rect x="42.4194%" y="149" width="2.9032%" height="15" fill="rgb(249,31,29)" fg:x="526" fg:w="36"/><text x="42.6694%" y="159.50">lo..</text></g><g><title>lox`core::ptr::drop_in_place&lt;core::option::Option&lt;lox::runtime::fast_env::FastEnv&gt;&gt; (12 samples, 0.97%)</title><rect x="44.3548%" y="133" width="0.9677%" height="15" fill="rgb(225,111,53)" fg:x="550" fg:w="12"/><text x="44.6048%" y="143.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;core::option::Option&lt;lox::runtime::fast_env::FastEnv&gt;&gt; (1 samples, 0.08%)</title><rect x="45.3226%" y="149" width="0.0806%" height="15" fill="rgb(238,160,17)" fg:x="562" fg:w="1"/><text x="45.5726%" y="159.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (1 samples, 0.08%)</title><rect x="45.4032%" y="149" width="0.0806%" height="15" fill="rgb(214,148,48)" fg:x="563" fg:w="1"/><text x="45.6532%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.16%)</title><rect x="49.6774%" y="133" width="0.1613%" height="15" fill="rgb(232,36,49)" fg:x="616" fg:w="2"/><text x="49.9274%" y="143.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.13%)</title><rect x="49.8387%" y="133" width="1.1290%" height="15" fill="rgb(209,103,24)" fg:x="618" fg:w="14"/><text x="50.0887%" y="143.50"></text></g><g><title>lox`__rdl_alloc (5 samples, 0.40%)</title><rect x="50.9677%" y="133" width="0.4032%" height="15" fill="rgb(229,88,8)" fg:x="632" fg:w="5"/><text x="51.2177%" y="143.50"></text></g><g><title>lox`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="51.3710%" y="133" width="0.0806%" height="15" fill="rgb(213,181,19)" fg:x="637" fg:w="1"/><text x="51.6210%" y="143.50"></text></g><g><title>lox`alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.08%)</title><rect x="51.4516%" y="133" width="0.0806%" height="15" fill="rgb(254,191,54)" fg:x="638" fg:w="1"/><text x="51.7016%" y="143.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (21 samples, 1.69%)</title><rect x="51.5323%" y="133" width="1.6935%" height="15" fill="rgb(241,83,37)" fg:x="639" fg:w="21"/><text x="51.7823%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.08%)</title><rect x="58.1452%" y="101" width="0.0806%" height="15" fill="rgb(233,36,39)" fg:x="721" fg:w="1"/><text x="58.3952%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (86 samples, 6.94%)</title><rect x="59.1935%" y="85" width="6.9355%" height="15" fill="rgb(226,3,54)" fg:x="734" fg:w="86"/><text x="59.4435%" y="95.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (43 samples, 3.47%)</title><rect x="62.6613%" y="69" width="3.4677%" height="15" fill="rgb(245,192,40)" fg:x="777" fg:w="43"/><text x="62.9113%" y="79.50">lib..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (114 samples, 9.19%)</title><rect x="57.0968%" y="117" width="9.1935%" height="15" fill="rgb(238,167,29)" fg:x="708" fg:w="114"/><text x="57.3468%" y="127.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (100 samples, 8.06%)</title><rect x="58.2258%" y="101" width="8.0645%" height="15" fill="rgb(232,182,51)" fg:x="722" fg:w="100"/><text x="58.4758%" y="111.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.16%)</title><rect x="66.1290%" y="85" width="0.1613%" height="15" fill="rgb(231,60,39)" fg:x="820" fg:w="2"/><text x="66.3790%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.24%)</title><rect x="66.2903%" y="117" width="0.2419%" height="15" fill="rgb(208,69,12)" fg:x="822" fg:w="3"/><text x="66.5403%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.08%)</title><rect x="66.5323%" y="117" width="0.0806%" height="15" fill="rgb(235,93,37)" fg:x="825" fg:w="1"/><text x="66.7823%" y="127.50"></text></g><g><title>lox`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.65%)</title><rect x="66.6129%" y="117" width="0.6452%" height="15" fill="rgb(213,116,39)" fg:x="826" fg:w="8"/><text x="66.8629%" y="127.50"></text></g><g><title>lox`lox::runtime::fast_env::FastEnv::new (191 samples, 15.40%)</title><rect x="53.2258%" y="133" width="15.4032%" height="15" fill="rgb(222,207,29)" fg:x="660" fg:w="191"/><text x="53.4758%" y="143.50">lox`lox::runtime::fast_e..</text></g><g><title>lox`alloc::vec::Vec&lt;T,A&gt;::extend_with (17 samples, 1.37%)</title><rect x="67.2581%" y="117" width="1.3710%" height="15" fill="rgb(206,96,30)" fg:x="834" fg:w="17"/><text x="67.5081%" y="127.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (2 samples, 0.16%)</title><rect x="68.6290%" y="133" width="0.1613%" height="15" fill="rgb(218,138,4)" fg:x="851" fg:w="2"/><text x="68.8790%" y="143.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (15 samples, 1.21%)</title><rect x="71.4516%" y="117" width="1.2097%" height="15" fill="rgb(250,191,14)" fg:x="886" fg:w="15"/><text x="71.7016%" y="127.50"></text></g><g><title>lox`lox::runtime::fast_env::FastEnv::assign (7 samples, 0.56%)</title><rect x="72.6613%" y="117" width="0.5645%" height="15" fill="rgb(239,60,40)" fg:x="901" fg:w="7"/><text x="72.9113%" y="127.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (6 samples, 0.48%)</title><rect x="74.5968%" y="101" width="0.4839%" height="15" fill="rgb(206,27,48)" fg:x="925" fg:w="6"/><text x="74.8468%" y="111.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (2 samples, 0.16%)</title><rect x="78.6290%" y="69" width="0.1613%" height="15" fill="rgb(225,35,8)" fg:x="975" fg:w="2"/><text x="78.8790%" y="79.50"></text></g><g><title>lox`lox::runtime::fast_env::FastEnv::assign (105 samples, 8.47%)</title><rect x="75.0806%" y="101" width="8.4677%" height="15" fill="rgb(250,213,24)" fg:x="931" fg:w="105"/><text x="75.3306%" y="111.50">lox`lox::run..</text></g><g><title>lox`lox::runtime::fast_env::FastEnv::assign (83 samples, 6.69%)</title><rect x="76.8548%" y="85" width="6.6935%" height="15" fill="rgb(247,123,22)" fg:x="953" fg:w="83"/><text x="77.1048%" y="95.50">lox`lox::..</text></g><g><title>lox`lox::runtime::fast_env::FastEnv::assign (59 samples, 4.76%)</title><rect x="78.7903%" y="69" width="4.7581%" height="15" fill="rgb(231,138,38)" fg:x="977" fg:w="59"/><text x="79.0403%" y="79.50">lox`lo..</text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (10 samples, 0.81%)</title><rect x="82.7419%" y="53" width="0.8065%" height="15" fill="rgb(231,145,46)" fg:x="1026" fg:w="10"/><text x="82.9919%" y="63.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (9 samples, 0.73%)</title><rect x="89.8387%" y="85" width="0.7258%" height="15" fill="rgb(251,118,11)" fg:x="1114" fg:w="9"/><text x="90.0887%" y="95.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (917 samples, 73.95%)</title><rect x="25.8065%" y="165" width="73.9516%" height="15" fill="rgb(217,147,25)" fg:x="320" fg:w="917"/><text x="26.0565%" y="175.50">lox`lox::runtime::interpreter::Interpreter::interpret</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret_block (673 samples, 54.27%)</title><rect x="45.4839%" y="149" width="54.2742%" height="15" fill="rgb(247,81,37)" fg:x="564" fg:w="673"/><text x="45.7339%" y="159.50">lox`lox::runtime::interpreter::Interpreter::interpret_block</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (384 samples, 30.97%)</title><rect x="68.7903%" y="133" width="30.9677%" height="15" fill="rgb(209,12,38)" fg:x="853" fg:w="384"/><text x="69.0403%" y="143.50">lox`lox::runtime::interpreter::Interpreter::interp..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (329 samples, 26.53%)</title><rect x="73.2258%" y="117" width="26.5323%" height="15" fill="rgb(227,1,9)" fg:x="908" fg:w="329"/><text x="73.4758%" y="127.50">lox`lox::runtime::interpreter::Interpreter..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (201 samples, 16.21%)</title><rect x="83.5484%" y="101" width="16.2097%" height="15" fill="rgb(248,47,43)" fg:x="1036" fg:w="201"/><text x="83.7984%" y="111.50">lox`lox::runtime::interpr..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (114 samples, 9.19%)</title><rect x="90.5645%" y="85" width="9.1935%" height="15" fill="rgb(221,10,30)" fg:x="1123" fg:w="114"/><text x="90.8145%" y="95.50">lox`lox::runt..</text></g><g><title>lox`lox::runtime::fast_env::FastEnv::fetch (69 samples, 5.56%)</title><rect x="94.1935%" y="69" width="5.5645%" height="15" fill="rgb(210,229,1)" fg:x="1168" fg:w="69"/><text x="94.4435%" y="79.50">lox`lox..</text></g><g><title>lox`lox::runtime::fast_env::FastEnv::fetch (55 samples, 4.44%)</title><rect x="95.3226%" y="53" width="4.4355%" height="15" fill="rgb(222,148,37)" fg:x="1182" fg:w="55"/><text x="95.5726%" y="63.50">lox`l..</text></g><g><title>lox`lox::runtime::fast_env::FastEnv::fetch (34 samples, 2.74%)</title><rect x="97.0161%" y="37" width="2.7419%" height="15" fill="rgb(234,67,33)" fg:x="1203" fg:w="34"/><text x="97.2661%" y="47.50">lo..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret_block (1,008 samples, 81.29%)</title><rect x="18.6290%" y="181" width="81.2903%" height="15" fill="rgb(247,98,35)" fg:x="231" fg:w="1008"/><text x="18.8790%" y="191.50">lox`lox::runtime::interpreter::Interpreter::interpret_block</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret_block (2 samples, 0.16%)</title><rect x="99.7581%" y="165" width="0.1613%" height="15" fill="rgb(247,138,52)" fg:x="1237" fg:w="2"/><text x="100.0081%" y="175.50"></text></g><g><title>all (1,240 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld`start (1,240 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>lox`main (1,240 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="335.50">lox`main</text></g><g><title>lox`std::rt::lang_start_internal (1,240 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(216,154,8)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="319.50">lox`std::rt::lang_start_internal</text></g><g><title>lox`std::rt::lang_start::_{{closure}} (1,240 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(244,35,45)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="303.50">lox`std::rt::lang_start::_{{closure}}</text></g><g><title>lox`std::sys_common::backtrace::__rust_begin_short_backtrace (1,240 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(251,115,12)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="287.50">lox`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lox`lox::main (1,240 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="271.50">lox`lox::main</text></g><g><title>lox`lox::Lox::run (1,240 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="255.50">lox`lox::Lox::run</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (1,240 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="239.50">lox`lox::runtime::interpreter::Interpreter::interpret</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret_block (1,240 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="1240"/><text x="0.2500%" y="223.50">lox`lox::runtime::interpreter::Interpreter::interpret_block</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (1,239 samples, 99.92%)</title><rect x="0.0806%" y="197" width="99.9194%" height="15" fill="rgb(209,38,44)" fg:x="1" fg:w="1239"/><text x="0.3306%" y="207.50">lox`lox::runtime::interpreter::Interpreter::interpret</text></g><g><title>lox`lox::runtime::interpreter::is_num (1 samples, 0.08%)</title><rect x="99.9194%" y="181" width="0.0806%" height="15" fill="rgb(236,212,23)" fg:x="1239" fg:w="1"/><text x="100.1694%" y="191.50"></text></g></svg></svg>