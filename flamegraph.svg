<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="11326"><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.06%)</title><rect x="0.0088%" y="213" width="0.0618%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="7"/><text x="0.2588%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (17 samples, 0.15%)</title><rect x="0.0706%" y="213" width="0.1501%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="17"/><text x="0.3206%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (17 samples, 0.15%)</title><rect x="0.2207%" y="213" width="0.1501%" height="15" fill="rgb(221,193,54)" fg:x="25" fg:w="17"/><text x="0.4707%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (12 samples, 0.11%)</title><rect x="0.3708%" y="213" width="0.1060%" height="15" fill="rgb(248,212,6)" fg:x="42" fg:w="12"/><text x="0.6208%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (10 samples, 0.09%)</title><rect x="0.4768%" y="213" width="0.0883%" height="15" fill="rgb(208,68,35)" fg:x="54" fg:w="10"/><text x="0.7268%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (10 samples, 0.09%)</title><rect x="0.5651%" y="213" width="0.0883%" height="15" fill="rgb(232,128,0)" fg:x="64" fg:w="10"/><text x="0.8151%" y="223.50"></text></g><g><title>lox`&lt;lox::parser::types::Stmt as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="0.6534%" y="213" width="0.0177%" height="15" fill="rgb(207,160,47)" fg:x="74" fg:w="2"/><text x="0.9034%" y="223.50"></text></g><g><title>lox`__rdl_alloc (10 samples, 0.09%)</title><rect x="0.6710%" y="213" width="0.0883%" height="15" fill="rgb(228,23,34)" fg:x="76" fg:w="10"/><text x="0.9210%" y="223.50"></text></g><g><title>lox`__rdl_dealloc (22 samples, 0.19%)</title><rect x="0.7593%" y="213" width="0.1942%" height="15" fill="rgb(218,30,26)" fg:x="86" fg:w="22"/><text x="1.0093%" y="223.50"></text></g><g><title>lox`__rust_alloc (5 samples, 0.04%)</title><rect x="0.9536%" y="213" width="0.0441%" height="15" fill="rgb(220,122,19)" fg:x="108" fg:w="5"/><text x="1.2036%" y="223.50"></text></g><g><title>lox`__rust_dealloc (4 samples, 0.04%)</title><rect x="0.9977%" y="213" width="0.0353%" height="15" fill="rgb(250,228,42)" fg:x="113" fg:w="4"/><text x="1.2477%" y="223.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (3 samples, 0.03%)</title><rect x="1.0330%" y="213" width="0.0265%" height="15" fill="rgb(240,193,28)" fg:x="117" fg:w="3"/><text x="1.2830%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.06%)</title><rect x="3.8937%" y="181" width="0.0618%" height="15" fill="rgb(216,20,37)" fg:x="441" fg:w="7"/><text x="4.1437%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (469 samples, 4.14%)</title><rect x="4.2380%" y="165" width="4.1409%" height="15" fill="rgb(206,188,39)" fg:x="480" fg:w="469"/><text x="4.4880%" y="175.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (252 samples, 2.22%)</title><rect x="6.1540%" y="149" width="2.2250%" height="15" fill="rgb(217,207,13)" fg:x="697" fg:w="252"/><text x="6.4040%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (598 samples, 5.28%)</title><rect x="3.1609%" y="197" width="5.2799%" height="15" fill="rgb(231,73,38)" fg:x="358" fg:w="598"/><text x="3.4109%" y="207.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (508 samples, 4.49%)</title><rect x="3.9555%" y="181" width="4.4853%" height="15" fill="rgb(225,20,46)" fg:x="448" fg:w="508"/><text x="4.2055%" y="191.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.06%)</title><rect x="8.3790%" y="165" width="0.0618%" height="15" fill="rgb(210,31,41)" fg:x="949" fg:w="7"/><text x="8.6290%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (16 samples, 0.14%)</title><rect x="8.4408%" y="197" width="0.1413%" height="15" fill="rgb(221,200,47)" fg:x="956" fg:w="16"/><text x="8.6908%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.19%)</title><rect x="8.5820%" y="197" width="0.1854%" height="15" fill="rgb(226,26,5)" fg:x="972" fg:w="21"/><text x="8.8320%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (333 samples, 2.94%)</title><rect x="10.0124%" y="181" width="2.9401%" height="15" fill="rgb(249,33,26)" fg:x="1134" fg:w="333"/><text x="10.2624%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`free (488 samples, 4.31%)</title><rect x="8.7674%" y="197" width="4.3087%" height="15" fill="rgb(235,183,28)" fg:x="993" fg:w="488"/><text x="9.0174%" y="207.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (14 samples, 0.12%)</title><rect x="12.9525%" y="181" width="0.1236%" height="15" fill="rgb(221,5,38)" fg:x="1467" fg:w="14"/><text x="13.2025%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (67 samples, 0.59%)</title><rect x="13.0761%" y="197" width="0.5916%" height="15" fill="rgb(247,18,42)" fg:x="1481" fg:w="67"/><text x="13.3261%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (403 samples, 3.56%)</title><rect x="13.6677%" y="197" width="3.5582%" height="15" fill="rgb(241,131,45)" fg:x="1548" fg:w="403"/><text x="13.9177%" y="207.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="17.2259%" y="197" width="0.0265%" height="15" fill="rgb(249,31,29)" fg:x="1951" fg:w="3"/><text x="17.4759%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (23 samples, 0.20%)</title><rect x="17.2523%" y="197" width="0.2031%" height="15" fill="rgb(225,111,53)" fg:x="1954" fg:w="23"/><text x="17.5023%" y="207.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="17.4554%" y="197" width="0.0795%" height="15" fill="rgb(238,160,17)" fg:x="1977" fg:w="9"/><text x="17.7054%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="18.0205%" y="181" width="0.0177%" height="15" fill="rgb(214,148,48)" fg:x="2041" fg:w="2"/><text x="18.2705%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.02%)</title><rect x="18.0381%" y="181" width="0.0177%" height="15" fill="rgb(232,36,49)" fg:x="2043" fg:w="2"/><text x="18.2881%" y="191.50"></text></g><g><title>lox`__rdl_alloc (7 samples, 0.06%)</title><rect x="18.0646%" y="181" width="0.0618%" height="15" fill="rgb(209,103,24)" fg:x="2046" fg:w="7"/><text x="18.3146%" y="191.50"></text></g><g><title>lox`__rust_alloc (3 samples, 0.03%)</title><rect x="18.1264%" y="181" width="0.0265%" height="15" fill="rgb(229,88,8)" fg:x="2053" fg:w="3"/><text x="18.3764%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (224 samples, 1.98%)</title><rect x="19.1683%" y="133" width="1.9778%" height="15" fill="rgb(213,181,19)" fg:x="2171" fg:w="224"/><text x="19.4183%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (110 samples, 0.97%)</title><rect x="20.1748%" y="117" width="0.9712%" height="15" fill="rgb(254,191,54)" fg:x="2285" fg:w="110"/><text x="20.4248%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (275 samples, 2.43%)</title><rect x="18.7533%" y="165" width="2.4280%" height="15" fill="rgb(241,83,37)" fg:x="2124" fg:w="275"/><text x="19.0033%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (250 samples, 2.21%)</title><rect x="18.9740%" y="149" width="2.2073%" height="15" fill="rgb(233,36,39)" fg:x="2149" fg:w="250"/><text x="19.2240%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.04%)</title><rect x="21.1460%" y="133" width="0.0353%" height="15" fill="rgb(226,3,54)" fg:x="2395" fg:w="4"/><text x="21.3960%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (21 samples, 0.19%)</title><rect x="21.1814%" y="165" width="0.1854%" height="15" fill="rgb(245,192,40)" fg:x="2399" fg:w="21"/><text x="21.4314%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.02%)</title><rect x="21.3668%" y="165" width="0.0177%" height="15" fill="rgb(238,167,29)" fg:x="2420" fg:w="2"/><text x="21.6168%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="21.3844%" y="165" width="0.0177%" height="15" fill="rgb(232,182,51)" fg:x="2422" fg:w="2"/><text x="21.6344%" y="175.50"></text></g><g><title>lox`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (2 samples, 0.02%)</title><rect x="21.4021%" y="165" width="0.0177%" height="15" fill="rgb(231,60,39)" fg:x="2424" fg:w="2"/><text x="21.6521%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (3 samples, 0.03%)</title><rect x="22.1526%" y="133" width="0.0265%" height="15" fill="rgb(208,69,12)" fg:x="2509" fg:w="3"/><text x="22.4026%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (217 samples, 1.92%)</title><rect x="22.3910%" y="117" width="1.9159%" height="15" fill="rgb(235,93,37)" fg:x="2536" fg:w="217"/><text x="22.6410%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (98 samples, 0.87%)</title><rect x="23.4416%" y="101" width="0.8653%" height="15" fill="rgb(213,116,39)" fg:x="2655" fg:w="98"/><text x="23.6916%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (279 samples, 2.46%)</title><rect x="21.8524%" y="149" width="2.4634%" height="15" fill="rgb(222,207,29)" fg:x="2475" fg:w="279"/><text x="22.1024%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (242 samples, 2.14%)</title><rect x="22.1791%" y="133" width="2.1367%" height="15" fill="rgb(206,96,30)" fg:x="2512" fg:w="242"/><text x="22.4291%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.06%)</title><rect x="24.3157%" y="149" width="0.0618%" height="15" fill="rgb(218,138,4)" fg:x="2754" fg:w="7"/><text x="24.5657%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.08%)</title><rect x="24.3775%" y="149" width="0.0795%" height="15" fill="rgb(250,191,14)" fg:x="2761" fg:w="9"/><text x="24.6275%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="24.4570%" y="149" width="0.0353%" height="15" fill="rgb(239,60,40)" fg:x="2770" fg:w="4"/><text x="24.7070%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (5 samples, 0.04%)</title><rect x="25.6401%" y="117" width="0.0441%" height="15" fill="rgb(206,27,48)" fg:x="2904" fg:w="5"/><text x="25.8901%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (284 samples, 2.51%)</title><rect x="25.2870%" y="133" width="2.5075%" height="15" fill="rgb(225,35,8)" fg:x="2864" fg:w="284"/><text x="25.5370%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (239 samples, 2.11%)</title><rect x="25.6843%" y="117" width="2.1102%" height="15" fill="rgb(250,213,24)" fg:x="2909" fg:w="239"/><text x="25.9343%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (215 samples, 1.90%)</title><rect x="25.8962%" y="101" width="1.8983%" height="15" fill="rgb(247,123,22)" fg:x="2933" fg:w="215"/><text x="26.1462%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (101 samples, 0.89%)</title><rect x="26.9027%" y="85" width="0.8918%" height="15" fill="rgb(231,138,38)" fg:x="3047" fg:w="101"/><text x="27.1527%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (7 samples, 0.06%)</title><rect x="27.7945%" y="133" width="0.0618%" height="15" fill="rgb(231,145,46)" fg:x="3148" fg:w="7"/><text x="28.0445%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.11%)</title><rect x="27.8563%" y="133" width="0.1148%" height="15" fill="rgb(251,118,11)" fg:x="3155" fg:w="13"/><text x="28.1063%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.06%)</title><rect x="27.9710%" y="133" width="0.0618%" height="15" fill="rgb(217,147,25)" fg:x="3168" fg:w="7"/><text x="28.2210%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.02%)</title><rect x="28.0328%" y="133" width="0.0177%" height="15" fill="rgb(247,81,37)" fg:x="3175" fg:w="2"/><text x="28.2828%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.03%)</title><rect x="28.0505%" y="133" width="0.0265%" height="15" fill="rgb(209,12,38)" fg:x="3177" fg:w="3"/><text x="28.3005%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="29.1806%" y="101" width="0.0177%" height="15" fill="rgb(227,1,9)" fg:x="3305" fg:w="2"/><text x="29.4306%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (482 samples, 4.26%)</title><rect x="29.5868%" y="85" width="4.2557%" height="15" fill="rgb(248,47,43)" fg:x="3351" fg:w="482"/><text x="29.8368%" y="95.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (224 samples, 1.98%)</title><rect x="31.8647%" y="69" width="1.9778%" height="15" fill="rgb(221,10,30)" fg:x="3609" fg:w="224"/><text x="32.1147%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (592 samples, 5.23%)</title><rect x="28.6686%" y="117" width="5.2269%" height="15" fill="rgb(210,229,1)" fg:x="3247" fg:w="592"/><text x="28.9186%" y="127.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (532 samples, 4.70%)</title><rect x="29.1983%" y="101" width="4.6972%" height="15" fill="rgb(222,148,37)" fg:x="3307" fg:w="532"/><text x="29.4483%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.05%)</title><rect x="33.8425%" y="85" width="0.0530%" height="15" fill="rgb(234,67,33)" fg:x="3833" fg:w="6"/><text x="34.0925%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (9 samples, 0.08%)</title><rect x="33.8955%" y="117" width="0.0795%" height="15" fill="rgb(247,98,35)" fg:x="3839" fg:w="9"/><text x="34.1455%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.04%)</title><rect x="33.9749%" y="117" width="0.0441%" height="15" fill="rgb(247,138,52)" fg:x="3848" fg:w="5"/><text x="34.2249%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="35.6172%" y="101" width="0.0177%" height="15" fill="rgb(213,79,30)" fg:x="4034" fg:w="2"/><text x="35.8672%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.02%)</title><rect x="35.6348%" y="101" width="0.0177%" height="15" fill="rgb(246,177,23)" fg:x="4036" fg:w="2"/><text x="35.8848%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (6 samples, 0.05%)</title><rect x="35.6525%" y="101" width="0.0530%" height="15" fill="rgb(230,62,27)" fg:x="4038" fg:w="6"/><text x="35.9025%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.04%)</title><rect x="35.7055%" y="101" width="0.0353%" height="15" fill="rgb(216,154,8)" fg:x="4044" fg:w="4"/><text x="35.9555%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.05%)</title><rect x="36.2617%" y="69" width="0.0530%" height="15" fill="rgb(244,35,45)" fg:x="4107" fg:w="6"/><text x="36.5117%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (235 samples, 2.07%)</title><rect x="36.5177%" y="53" width="2.0749%" height="15" fill="rgb(251,115,12)" fg:x="4136" fg:w="235"/><text x="36.7677%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (117 samples, 1.03%)</title><rect x="37.5596%" y="37" width="1.0330%" height="15" fill="rgb(240,54,50)" fg:x="4254" fg:w="117"/><text x="37.8096%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (304 samples, 2.68%)</title><rect x="35.9438%" y="85" width="2.6841%" height="15" fill="rgb(233,84,52)" fg:x="4071" fg:w="304"/><text x="36.1938%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (262 samples, 2.31%)</title><rect x="36.3147%" y="69" width="2.3133%" height="15" fill="rgb(207,117,47)" fg:x="4113" fg:w="262"/><text x="36.5647%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.04%)</title><rect x="38.5926%" y="53" width="0.0353%" height="15" fill="rgb(249,43,39)" fg:x="4371" fg:w="4"/><text x="38.8426%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (11 samples, 0.10%)</title><rect x="38.6279%" y="85" width="0.0971%" height="15" fill="rgb(209,38,44)" fg:x="4375" fg:w="11"/><text x="38.8779%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="38.7251%" y="85" width="0.0265%" height="15" fill="rgb(236,212,23)" fg:x="4386" fg:w="3"/><text x="38.9751%" y="95.50"></text></g><g><title>lox`&lt;alloc::string::String as core::clone::Clone&gt;::clone (351 samples, 3.10%)</title><rect x="35.7408%" y="101" width="3.0991%" height="15" fill="rgb(242,79,21)" fg:x="4048" fg:w="351"/><text x="35.9908%" y="111.50">lox..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.09%)</title><rect x="38.7515%" y="85" width="0.0883%" height="15" fill="rgb(211,96,35)" fg:x="4389" fg:w="10"/><text x="39.0015%" y="95.50"></text></g><g><title>lox`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (558 samples, 4.93%)</title><rect x="34.0191%" y="117" width="4.9267%" height="15" fill="rgb(253,215,40)" fg:x="3853" fg:w="558"/><text x="34.2691%" y="127.50">lox`&lt;T..</text></g><g><title>lox`__rdl_alloc (12 samples, 0.11%)</title><rect x="38.8398%" y="101" width="0.1060%" height="15" fill="rgb(211,81,21)" fg:x="4399" fg:w="12"/><text x="39.0898%" y="111.50"></text></g><g><title>lox`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (1,234 samples, 10.90%)</title><rect x="28.0770%" y="133" width="10.8953%" height="15" fill="rgb(208,190,38)" fg:x="3180" fg:w="1234"/><text x="28.3270%" y="143.50">lox`&lt;T as alloc:..</text></g><g><title>lox`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="38.9458%" y="117" width="0.0265%" height="15" fill="rgb(235,213,38)" fg:x="4411" fg:w="3"/><text x="39.1958%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (4 samples, 0.04%)</title><rect x="39.6080%" y="101" width="0.0353%" height="15" fill="rgb(237,122,38)" fg:x="4486" fg:w="4"/><text x="39.8580%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (297 samples, 2.62%)</title><rect x="39.8199%" y="85" width="2.6223%" height="15" fill="rgb(244,218,35)" fg:x="4510" fg:w="297"/><text x="40.0699%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (142 samples, 1.25%)</title><rect x="41.1884%" y="69" width="1.2538%" height="15" fill="rgb(240,68,47)" fg:x="4665" fg:w="142"/><text x="41.4384%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (362 samples, 3.20%)</title><rect x="39.2725%" y="117" width="3.1962%" height="15" fill="rgb(210,16,53)" fg:x="4448" fg:w="362"/><text x="39.5225%" y="127.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (320 samples, 2.83%)</title><rect x="39.6433%" y="101" width="2.8254%" height="15" fill="rgb(235,124,12)" fg:x="4490" fg:w="320"/><text x="39.8933%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.03%)</title><rect x="42.4422%" y="85" width="0.0265%" height="15" fill="rgb(224,169,11)" fg:x="4807" fg:w="3"/><text x="42.6922%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.05%)</title><rect x="42.4687%" y="117" width="0.0530%" height="15" fill="rgb(250,166,2)" fg:x="4810" fg:w="6"/><text x="42.7187%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.08%)</title><rect x="42.5216%" y="117" width="0.0795%" height="15" fill="rgb(242,216,29)" fg:x="4816" fg:w="9"/><text x="42.7716%" y="127.50"></text></g><g><title>lox`&lt;alloc::string::String as core::clone::Clone&gt;::clone (433 samples, 3.82%)</title><rect x="38.9723%" y="133" width="3.8231%" height="15" fill="rgb(230,116,27)" fg:x="4414" fg:w="433"/><text x="39.2223%" y="143.50">lox`..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.19%)</title><rect x="42.6011%" y="117" width="0.1942%" height="15" fill="rgb(228,99,48)" fg:x="4825" fg:w="22"/><text x="42.8511%" y="127.50"></text></g><g><title>lox`__rdl_alloc (16 samples, 0.14%)</title><rect x="42.7953%" y="133" width="0.1413%" height="15" fill="rgb(253,11,6)" fg:x="4847" fg:w="16"/><text x="43.0453%" y="143.50"></text></g><g><title>lox`&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (2,094 samples, 18.49%)</title><rect x="24.4923%" y="149" width="18.4884%" height="15" fill="rgb(247,143,39)" fg:x="2774" fg:w="2094"/><text x="24.7423%" y="159.50">lox`&lt;T as alloc::alloc::Write..</text></g><g><title>lox`__rust_alloc (5 samples, 0.04%)</title><rect x="42.9366%" y="133" width="0.0441%" height="15" fill="rgb(236,97,10)" fg:x="4863" fg:w="5"/><text x="43.1866%" y="143.50"></text></g><g><title>lox`&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="42.9808%" y="149" width="0.0530%" height="15" fill="rgb(233,208,19)" fg:x="4868" fg:w="6"/><text x="43.2308%" y="159.50"></text></g><g><title>lox`__rdl_alloc (7 samples, 0.06%)</title><rect x="43.0337%" y="149" width="0.0618%" height="15" fill="rgb(216,164,2)" fg:x="4874" fg:w="7"/><text x="43.2837%" y="159.50"></text></g><g><title>lox`&lt;lox::parser::types::Stmt as core::clone::Clone&gt;::clone (2,459 samples, 21.71%)</title><rect x="21.4197%" y="165" width="21.7111%" height="15" fill="rgb(220,129,5)" fg:x="2426" fg:w="2459"/><text x="21.6697%" y="175.50">lox`&lt;lox::parser::types::Stmt as c..</text></g><g><title>lox`__rust_alloc (4 samples, 0.04%)</title><rect x="43.0955%" y="149" width="0.0353%" height="15" fill="rgb(242,17,10)" fg:x="4881" fg:w="4"/><text x="43.3455%" y="159.50"></text></g><g><title>lox`&lt;lox::parser::types::Stmt as core::clone::Clone&gt;::clone (2,910 samples, 25.69%)</title><rect x="17.5349%" y="197" width="25.6931%" height="15" fill="rgb(242,107,0)" fg:x="1986" fg:w="2910"/><text x="17.7849%" y="207.50">lox`&lt;lox::parser::types::Stmt as core::cl..</text></g><g><title>lox`alloc::slice::_&lt;impl [T]&gt;::to_vec_in (2,840 samples, 25.08%)</title><rect x="18.1529%" y="181" width="25.0750%" height="15" fill="rgb(251,28,31)" fg:x="2056" fg:w="2840"/><text x="18.4029%" y="191.50">lox`alloc::slice::_&lt;impl [T]&gt;::to_vec_in</text></g><g><title>lox`__rdl_alloc (11 samples, 0.10%)</title><rect x="43.1308%" y="165" width="0.0971%" height="15" fill="rgb(233,223,10)" fg:x="4885" fg:w="11"/><text x="43.3808%" y="175.50"></text></g><g><title>lox`__rdl_dealloc (11 samples, 0.10%)</title><rect x="43.2280%" y="197" width="0.0971%" height="15" fill="rgb(215,21,27)" fg:x="4896" fg:w="11"/><text x="43.4780%" y="207.50"></text></g><g><title>lox`__rust_dealloc (4 samples, 0.04%)</title><rect x="43.3251%" y="197" width="0.0353%" height="15" fill="rgb(232,23,21)" fg:x="4907" fg:w="4"/><text x="43.5751%" y="207.50"></text></g><g><title>lox`alloc::slice::_&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="43.3604%" y="197" width="0.0177%" height="15" fill="rgb(244,5,23)" fg:x="4911" fg:w="2"/><text x="43.6104%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.02%)</title><rect x="43.8195%" y="181" width="0.0177%" height="15" fill="rgb(226,81,46)" fg:x="4963" fg:w="2"/><text x="44.0695%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (106 samples, 0.94%)</title><rect x="44.2522%" y="165" width="0.9359%" height="15" fill="rgb(247,70,30)" fg:x="5012" fg:w="106"/><text x="44.5022%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (157 samples, 1.39%)</title><rect x="43.8372%" y="181" width="1.3862%" height="15" fill="rgb(212,68,19)" fg:x="4965" fg:w="157"/><text x="44.0872%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.04%)</title><rect x="45.1881%" y="165" width="0.0353%" height="15" fill="rgb(240,187,13)" fg:x="5118" fg:w="4"/><text x="45.4381%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (17 samples, 0.15%)</title><rect x="45.2234%" y="181" width="0.1501%" height="15" fill="rgb(223,113,26)" fg:x="5122" fg:w="17"/><text x="45.4734%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (136 samples, 1.20%)</title><rect x="45.3735%" y="181" width="1.2008%" height="15" fill="rgb(206,192,2)" fg:x="5139" fg:w="136"/><text x="45.6235%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.04%)</title><rect x="46.5743%" y="181" width="0.0353%" height="15" fill="rgb(241,108,4)" fg:x="5275" fg:w="4"/><text x="46.8243%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (14 samples, 0.12%)</title><rect x="47.5631%" y="165" width="0.1236%" height="15" fill="rgb(247,173,49)" fg:x="5387" fg:w="14"/><text x="47.8131%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (119 samples, 1.05%)</title><rect x="48.1017%" y="149" width="1.0507%" height="15" fill="rgb(224,114,35)" fg:x="5448" fg:w="119"/><text x="48.3517%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (173 samples, 1.53%)</title><rect x="47.6867%" y="165" width="1.5275%" height="15" fill="rgb(245,159,27)" fg:x="5401" fg:w="173"/><text x="47.9367%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.06%)</title><rect x="49.1524%" y="149" width="0.0618%" height="15" fill="rgb(245,172,44)" fg:x="5567" fg:w="7"/><text x="49.4024%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.13%)</title><rect x="49.2142%" y="165" width="0.1324%" height="15" fill="rgb(236,23,11)" fg:x="5574" fg:w="15"/><text x="49.4642%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (125 samples, 1.10%)</title><rect x="49.3466%" y="165" width="1.1037%" height="15" fill="rgb(205,117,38)" fg:x="5589" fg:w="125"/><text x="49.5966%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.05%)</title><rect x="50.4503%" y="165" width="0.0530%" height="15" fill="rgb(237,72,25)" fg:x="5714" fg:w="6"/><text x="50.7003%" y="175.50"></text></g><g><title>lox`__rdl_dealloc (15 samples, 0.13%)</title><rect x="50.5033%" y="165" width="0.1324%" height="15" fill="rgb(244,70,9)" fg:x="5720" fg:w="15"/><text x="50.7533%" y="175.50"></text></g><g><title>lox`__rust_dealloc (2 samples, 0.02%)</title><rect x="50.6357%" y="165" width="0.0177%" height="15" fill="rgb(217,125,39)" fg:x="5735" fg:w="2"/><text x="50.8857%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (11 samples, 0.10%)</title><rect x="50.9271%" y="149" width="0.0971%" height="15" fill="rgb(235,36,10)" fg:x="5768" fg:w="11"/><text x="51.1771%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (201 samples, 1.77%)</title><rect x="51.8630%" y="133" width="1.7747%" height="15" fill="rgb(251,123,47)" fg:x="5874" fg:w="201"/><text x="52.1130%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`free (320 samples, 2.83%)</title><rect x="51.0242%" y="149" width="2.8254%" height="15" fill="rgb(221,13,13)" fg:x="5779" fg:w="320"/><text x="51.2742%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (24 samples, 0.21%)</title><rect x="53.6376%" y="133" width="0.2119%" height="15" fill="rgb(238,131,9)" fg:x="6075" fg:w="24"/><text x="53.8876%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (43 samples, 0.38%)</title><rect x="53.8495%" y="149" width="0.3797%" height="15" fill="rgb(211,50,8)" fg:x="6099" fg:w="43"/><text x="54.0995%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (314 samples, 2.77%)</title><rect x="54.2292%" y="149" width="2.7724%" height="15" fill="rgb(245,182,24)" fg:x="6142" fg:w="314"/><text x="54.4792%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (16 samples, 0.14%)</title><rect x="57.0016%" y="149" width="0.1413%" height="15" fill="rgb(242,14,37)" fg:x="6456" fg:w="16"/><text x="57.2516%" y="159.50"></text></g><g><title>lox`__rdl_dealloc (13 samples, 0.11%)</title><rect x="57.1429%" y="149" width="0.1148%" height="15" fill="rgb(246,228,12)" fg:x="6472" fg:w="13"/><text x="57.3929%" y="159.50"></text></g><g><title>lox`__rust_dealloc (4 samples, 0.04%)</title><rect x="57.2576%" y="149" width="0.0353%" height="15" fill="rgb(213,55,15)" fg:x="6485" fg:w="4"/><text x="57.5076%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (233 samples, 2.06%)</title><rect x="58.3613%" y="117" width="2.0572%" height="15" fill="rgb(209,9,3)" fg:x="6610" fg:w="233"/><text x="58.6113%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`free (310 samples, 2.74%)</title><rect x="57.7697%" y="133" width="2.7371%" height="15" fill="rgb(230,59,30)" fg:x="6543" fg:w="310"/><text x="58.0197%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (10 samples, 0.09%)</title><rect x="60.4185%" y="117" width="0.0883%" height="15" fill="rgb(209,121,21)" fg:x="6843" fg:w="10"/><text x="60.6685%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (41 samples, 0.36%)</title><rect x="60.5068%" y="133" width="0.3620%" height="15" fill="rgb(220,109,13)" fg:x="6853" fg:w="41"/><text x="60.7568%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (281 samples, 2.48%)</title><rect x="60.8688%" y="133" width="2.4810%" height="15" fill="rgb(232,18,1)" fg:x="6894" fg:w="281"/><text x="61.1188%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.07%)</title><rect x="63.3498%" y="133" width="0.0706%" height="15" fill="rgb(215,41,42)" fg:x="7175" fg:w="8"/><text x="63.5998%" y="143.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::parser::types::Stmt&gt; (2,302 samples, 20.32%)</title><rect x="43.3781%" y="197" width="20.3249%" height="15" fill="rgb(224,123,36)" fg:x="4913" fg:w="2302"/><text x="43.6281%" y="207.50">lox`core::ptr::drop_in_place&lt;lox..</text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::parser::types::Stmt&gt; (1,935 samples, 17.08%)</title><rect x="46.6184%" y="181" width="17.0846%" height="15" fill="rgb(240,125,3)" fg:x="5280" fg:w="1935"/><text x="46.8684%" y="191.50">lox`core::ptr::drop_in_pla..</text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::parser::types::Expr&gt; (1,478 samples, 13.05%)</title><rect x="50.6534%" y="165" width="13.0496%" height="15" fill="rgb(205,98,50)" fg:x="5737" fg:w="1478"/><text x="50.9034%" y="175.50">lox`core::ptr::drop_..</text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::parser::types::Expr&gt; (726 samples, 6.41%)</title><rect x="57.2930%" y="149" width="6.4100%" height="15" fill="rgb(205,185,37)" fg:x="6489" fg:w="726"/><text x="57.5430%" y="159.50">lox`core..</text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::parser::types::Expr&gt; (32 samples, 0.28%)</title><rect x="63.4204%" y="133" width="0.2825%" height="15" fill="rgb(238,207,15)" fg:x="7183" fg:w="32"/><text x="63.6704%" y="143.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (53 samples, 0.47%)</title><rect x="63.7030%" y="197" width="0.4679%" height="15" fill="rgb(213,199,42)" fg:x="7215" fg:w="53"/><text x="63.9530%" y="207.50"></text></g><g><title>lox`lox::runtime::environment::Env::new (4 samples, 0.04%)</title><rect x="64.1709%" y="197" width="0.0353%" height="15" fill="rgb(235,201,11)" fg:x="7268" fg:w="4"/><text x="64.4209%" y="207.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (29 samples, 0.26%)</title><rect x="66.7402%" y="181" width="0.2560%" height="15" fill="rgb(207,46,11)" fg:x="7559" fg:w="29"/><text x="66.9902%" y="191.50"></text></g><g><title>lox`lox::runtime::environment::EnvInner::fetch (6 samples, 0.05%)</title><rect x="66.9963%" y="181" width="0.0530%" height="15" fill="rgb(241,35,35)" fg:x="7588" fg:w="6"/><text x="67.2463%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (3 samples, 0.03%)</title><rect x="67.9234%" y="165" width="0.0265%" height="15" fill="rgb(243,32,47)" fg:x="7693" fg:w="3"/><text x="68.1734%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (9 samples, 0.08%)</title><rect x="67.9498%" y="165" width="0.0795%" height="15" fill="rgb(247,202,23)" fg:x="7696" fg:w="9"/><text x="68.1998%" y="175.50"></text></g><g><title>lox`DYLD-STUB$$memcmp (3 samples, 0.03%)</title><rect x="68.0293%" y="165" width="0.0265%" height="15" fill="rgb(219,102,11)" fg:x="7705" fg:w="3"/><text x="68.2793%" y="175.50"></text></g><g><title>lox`hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="68.0558%" y="165" width="0.0441%" height="15" fill="rgb(243,110,44)" fg:x="7708" fg:w="5"/><text x="68.3058%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (21 samples, 0.19%)</title><rect x="69.5921%" y="149" width="0.1854%" height="15" fill="rgb(222,74,54)" fg:x="7882" fg:w="21"/><text x="69.8421%" y="159.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.06%)</title><rect x="69.7775%" y="149" width="0.0618%" height="15" fill="rgb(216,99,12)" fg:x="7903" fg:w="7"/><text x="70.0275%" y="159.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (768 samples, 6.78%)</title><rect x="64.2063%" y="197" width="6.7809%" height="15" fill="rgb(226,22,26)" fg:x="7272" fg:w="768"/><text x="64.4563%" y="207.50">lox`lox::..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (446 samples, 3.94%)</title><rect x="67.0493%" y="181" width="3.9378%" height="15" fill="rgb(217,163,10)" fg:x="7594" fg:w="446"/><text x="67.2993%" y="191.50">lox`..</text></g><g><title>lox`lox::runtime::environment::EnvInner::fetch (327 samples, 2.89%)</title><rect x="68.0999%" y="165" width="2.8872%" height="15" fill="rgb(213,25,53)" fg:x="7713" fg:w="327"/><text x="68.3499%" y="175.50">lo..</text></g><g><title>lox`hashbrown::map::make_hash (130 samples, 1.15%)</title><rect x="69.8393%" y="149" width="1.1478%" height="15" fill="rgb(252,105,26)" fg:x="7910" fg:w="130"/><text x="70.0893%" y="159.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (70 samples, 0.62%)</title><rect x="70.3691%" y="133" width="0.6180%" height="15" fill="rgb(220,39,43)" fg:x="7970" fg:w="70"/><text x="70.6191%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.05%)</title><rect x="71.5610%" y="181" width="0.0530%" height="15" fill="rgb(229,68,48)" fg:x="8105" fg:w="6"/><text x="71.8110%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="71.6140%" y="181" width="0.0265%" height="15" fill="rgb(252,8,32)" fg:x="8111" fg:w="3"/><text x="71.8640%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (136 samples, 1.20%)</title><rect x="71.9936%" y="165" width="1.2008%" height="15" fill="rgb(223,20,43)" fg:x="8154" fg:w="136"/><text x="72.2436%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (182 samples, 1.61%)</title><rect x="71.6405%" y="181" width="1.6069%" height="15" fill="rgb(229,81,49)" fg:x="8114" fg:w="182"/><text x="71.8905%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.05%)</title><rect x="73.1944%" y="165" width="0.0530%" height="15" fill="rgb(236,28,36)" fg:x="8290" fg:w="6"/><text x="73.4444%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.03%)</title><rect x="73.2474%" y="181" width="0.0265%" height="15" fill="rgb(249,185,26)" fg:x="8296" fg:w="3"/><text x="73.4974%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (24 samples, 0.21%)</title><rect x="73.2739%" y="181" width="0.2119%" height="15" fill="rgb(249,174,33)" fg:x="8299" fg:w="24"/><text x="73.5239%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (136 samples, 1.20%)</title><rect x="73.4858%" y="181" width="1.2008%" height="15" fill="rgb(233,201,37)" fg:x="8323" fg:w="136"/><text x="73.7358%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (8 samples, 0.07%)</title><rect x="74.6866%" y="181" width="0.0706%" height="15" fill="rgb(221,78,26)" fg:x="8459" fg:w="8"/><text x="74.9366%" y="191.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.13%)</title><rect x="75.1545%" y="165" width="0.1324%" height="15" fill="rgb(250,127,30)" fg:x="8512" fg:w="15"/><text x="75.4045%" y="175.50"></text></g><g><title>lox`&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 0.63%)</title><rect x="74.7572%" y="181" width="0.6269%" height="15" fill="rgb(230,49,44)" fg:x="8467" fg:w="71"/><text x="75.0072%" y="191.50"></text></g><g><title>lox`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.10%)</title><rect x="75.2870%" y="165" width="0.0971%" height="15" fill="rgb(229,67,23)" fg:x="8527" fg:w="11"/><text x="75.5370%" y="175.50"></text></g><g><title>lox`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="75.3841%" y="181" width="0.0265%" height="15" fill="rgb(249,83,47)" fg:x="8538" fg:w="3"/><text x="75.6341%" y="191.50"></text></g><g><title>lox`__rdl_alloc (2 samples, 0.02%)</title><rect x="75.4106%" y="181" width="0.0177%" height="15" fill="rgb(215,43,3)" fg:x="8541" fg:w="2"/><text x="75.6606%" y="191.50"></text></g><g><title>lox`__rust_alloc (4 samples, 0.04%)</title><rect x="75.4282%" y="181" width="0.0353%" height="15" fill="rgb(238,154,13)" fg:x="8543" fg:w="4"/><text x="75.6782%" y="191.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (21 samples, 0.19%)</title><rect x="75.4635%" y="181" width="0.1854%" height="15" fill="rgb(219,56,2)" fg:x="8547" fg:w="21"/><text x="75.7135%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.02%)</title><rect x="76.5672%" y="149" width="0.0177%" height="15" fill="rgb(233,0,4)" fg:x="8672" fg:w="2"/><text x="76.8172%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (222 samples, 1.96%)</title><rect x="76.7173%" y="133" width="1.9601%" height="15" fill="rgb(235,30,7)" fg:x="8689" fg:w="222"/><text x="76.9673%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (114 samples, 1.01%)</title><rect x="77.6708%" y="117" width="1.0065%" height="15" fill="rgb(250,79,13)" fg:x="8797" fg:w="114"/><text x="77.9208%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (275 samples, 2.43%)</title><rect x="76.2670%" y="165" width="2.4280%" height="15" fill="rgb(211,146,34)" fg:x="8638" fg:w="275"/><text x="76.5170%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (239 samples, 2.11%)</title><rect x="76.5848%" y="149" width="2.1102%" height="15" fill="rgb(228,22,38)" fg:x="8674" fg:w="239"/><text x="76.8348%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.02%)</title><rect x="78.6774%" y="133" width="0.0177%" height="15" fill="rgb(235,168,5)" fg:x="8911" fg:w="2"/><text x="78.9274%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.04%)</title><rect x="78.6950%" y="165" width="0.0441%" height="15" fill="rgb(221,155,16)" fg:x="8913" fg:w="5"/><text x="78.9450%" y="175.50"></text></g><g><title>lox`lox::runtime::environment::Env::new (355 samples, 3.13%)</title><rect x="75.6489%" y="181" width="3.1344%" height="15" fill="rgb(215,215,53)" fg:x="8568" fg:w="355"/><text x="75.8989%" y="191.50">lox..</text></g><g><title>lox`hashbrown::raw::sse2::Group::static_empty (4 samples, 0.04%)</title><rect x="78.7480%" y="165" width="0.0353%" height="15" fill="rgb(223,4,10)" fg:x="8919" fg:w="4"/><text x="78.9980%" y="175.50"></text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (4 samples, 0.04%)</title><rect x="78.7833%" y="181" width="0.0353%" height="15" fill="rgb(234,103,6)" fg:x="8923" fg:w="4"/><text x="79.0333%" y="191.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (29 samples, 0.26%)</title><rect x="79.7192%" y="165" width="0.2560%" height="15" fill="rgb(227,97,0)" fg:x="9029" fg:w="29"/><text x="79.9692%" y="175.50"></text></g><g><title>lox`lox::runtime::environment::Env::assign (5 samples, 0.04%)</title><rect x="79.9753%" y="165" width="0.0441%" height="15" fill="rgb(234,150,53)" fg:x="9058" fg:w="5"/><text x="80.2253%" y="175.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (13 samples, 0.11%)</title><rect x="80.6993%" y="149" width="0.1148%" height="15" fill="rgb(228,201,54)" fg:x="9140" fg:w="13"/><text x="80.9493%" y="159.50"></text></g><g><title>lox`hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="80.8141%" y="149" width="0.0353%" height="15" fill="rgb(222,22,37)" fg:x="9153" fg:w="4"/><text x="81.0641%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.04%)</title><rect x="81.5116%" y="133" width="0.0441%" height="15" fill="rgb(237,53,32)" fg:x="9232" fg:w="5"/><text x="81.7616%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (3 samples, 0.03%)</title><rect x="81.5557%" y="133" width="0.0265%" height="15" fill="rgb(233,25,53)" fg:x="9237" fg:w="3"/><text x="81.8057%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.02%)</title><rect x="81.5822%" y="133" width="0.0177%" height="15" fill="rgb(210,40,34)" fg:x="9240" fg:w="2"/><text x="81.8322%" y="143.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.04%)</title><rect x="81.6175%" y="133" width="0.0441%" height="15" fill="rgb(241,220,44)" fg:x="9244" fg:w="5"/><text x="81.8675%" y="143.50"></text></g><g><title>lox`__rdl_alloc (3 samples, 0.03%)</title><rect x="81.6617%" y="133" width="0.0265%" height="15" fill="rgb(235,28,35)" fg:x="9249" fg:w="3"/><text x="81.9117%" y="143.50"></text></g><g><title>lox`__rust_alloc (7 samples, 0.06%)</title><rect x="81.6882%" y="133" width="0.0618%" height="15" fill="rgb(210,56,17)" fg:x="9252" fg:w="7"/><text x="81.9382%" y="143.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (2 samples, 0.02%)</title><rect x="81.7500%" y="133" width="0.0177%" height="15" fill="rgb(224,130,29)" fg:x="9259" fg:w="2"/><text x="82.0000%" y="143.50"></text></g><g><title>lox`hashbrown::map::make_hash (180 samples, 1.59%)</title><rect x="81.7676%" y="133" width="1.5893%" height="15" fill="rgb(235,212,8)" fg:x="9261" fg:w="180"/><text x="82.0176%" y="143.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (58 samples, 0.51%)</title><rect x="82.8448%" y="117" width="0.5121%" height="15" fill="rgb(223,33,50)" fg:x="9383" fg:w="58"/><text x="83.0948%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.05%)</title><rect x="84.9815%" y="101" width="0.0530%" height="15" fill="rgb(219,149,13)" fg:x="9625" fg:w="6"/><text x="85.2315%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (240 samples, 2.12%)</title><rect x="85.2552%" y="85" width="2.1190%" height="15" fill="rgb(250,156,29)" fg:x="9656" fg:w="240"/><text x="85.5052%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (109 samples, 0.96%)</title><rect x="86.4118%" y="69" width="0.9624%" height="15" fill="rgb(216,193,19)" fg:x="9787" fg:w="109"/><text x="86.6618%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (309 samples, 2.73%)</title><rect x="84.7078%" y="117" width="2.7282%" height="15" fill="rgb(216,135,14)" fg:x="9594" fg:w="309"/><text x="84.9578%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (272 samples, 2.40%)</title><rect x="85.0344%" y="101" width="2.4016%" height="15" fill="rgb(241,47,5)" fg:x="9631" fg:w="272"/><text x="85.2844%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.06%)</title><rect x="87.3742%" y="85" width="0.0618%" height="15" fill="rgb(233,42,35)" fg:x="9896" fg:w="7"/><text x="87.6242%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.07%)</title><rect x="87.4360%" y="117" width="0.0706%" height="15" fill="rgb(231,13,6)" fg:x="9903" fg:w="8"/><text x="87.6860%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.04%)</title><rect x="87.5066%" y="117" width="0.0353%" height="15" fill="rgb(207,181,40)" fg:x="9911" fg:w="4"/><text x="87.7566%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.08%)</title><rect x="87.5419%" y="117" width="0.0795%" height="15" fill="rgb(254,173,49)" fg:x="9915" fg:w="9"/><text x="87.7919%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.02%)</title><rect x="87.6214%" y="117" width="0.0177%" height="15" fill="rgb(221,1,38)" fg:x="9924" fg:w="2"/><text x="87.8714%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="87.6391%" y="117" width="0.0177%" height="15" fill="rgb(206,124,46)" fg:x="9926" fg:w="2"/><text x="87.8891%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (10 samples, 0.09%)</title><rect x="87.6655%" y="117" width="0.0883%" height="15" fill="rgb(249,21,11)" fg:x="9929" fg:w="10"/><text x="87.9155%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.13%)</title><rect x="87.7538%" y="117" width="0.1324%" height="15" fill="rgb(222,201,40)" fg:x="9939" fg:w="15"/><text x="88.0038%" y="127.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.11%)</title><rect x="87.8863%" y="117" width="0.1060%" height="15" fill="rgb(235,61,29)" fg:x="9954" fg:w="12"/><text x="88.1363%" y="127.50"></text></g><g><title>lox`DYLD-STUB$$memcmp (4 samples, 0.04%)</title><rect x="87.9922%" y="117" width="0.0353%" height="15" fill="rgb(219,207,3)" fg:x="9966" fg:w="4"/><text x="88.2422%" y="127.50"></text></g><g><title>lox`__rdl_dealloc (4 samples, 0.04%)</title><rect x="88.0275%" y="117" width="0.0353%" height="15" fill="rgb(222,56,46)" fg:x="9970" fg:w="4"/><text x="88.2775%" y="127.50"></text></g><g><title>lox`__rust_dealloc (4 samples, 0.04%)</title><rect x="88.0629%" y="117" width="0.0353%" height="15" fill="rgb(239,76,54)" fg:x="9974" fg:w="4"/><text x="88.3129%" y="127.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (11 samples, 0.10%)</title><rect x="88.0982%" y="117" width="0.0971%" height="15" fill="rgb(231,124,27)" fg:x="9978" fg:w="11"/><text x="88.3482%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (97 samples, 0.86%)</title><rect x="90.1289%" y="85" width="0.8564%" height="15" fill="rgb(249,195,6)" fg:x="10208" fg:w="97"/><text x="90.3789%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (138 samples, 1.22%)</title><rect x="89.7934%" y="101" width="1.2184%" height="15" fill="rgb(237,174,47)" fg:x="10170" fg:w="138"/><text x="90.0434%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="90.9853%" y="85" width="0.0265%" height="15" fill="rgb(206,201,31)" fg:x="10305" fg:w="3"/><text x="91.2353%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (18 samples, 0.16%)</title><rect x="91.0118%" y="101" width="0.1589%" height="15" fill="rgb(231,57,52)" fg:x="10308" fg:w="18"/><text x="91.2618%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (143 samples, 1.26%)</title><rect x="91.1708%" y="101" width="1.2626%" height="15" fill="rgb(248,177,22)" fg:x="10326" fg:w="143"/><text x="91.4208%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.03%)</title><rect x="92.4333%" y="101" width="0.0265%" height="15" fill="rgb(215,211,37)" fg:x="10469" fg:w="3"/><text x="92.6833%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (6 samples, 0.05%)</title><rect x="92.4598%" y="101" width="0.0530%" height="15" fill="rgb(241,128,51)" fg:x="10472" fg:w="6"/><text x="92.7098%" y="111.50"></text></g><g><title>lox`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (542 samples, 4.79%)</title><rect x="88.1953%" y="117" width="4.7854%" height="15" fill="rgb(227,165,31)" fg:x="9989" fg:w="542"/><text x="88.4453%" y="127.50">lox`ha..</text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (53 samples, 0.47%)</title><rect x="92.5128%" y="101" width="0.4679%" height="15" fill="rgb(228,167,24)" fg:x="10478" fg:w="53"/><text x="92.7628%" y="111.50"></text></g><g><title>lox`lox::runtime::environment::Env::assign (1,495 samples, 13.20%)</title><rect x="80.8494%" y="149" width="13.1997%" height="15" fill="rgb(228,143,12)" fg:x="9157" fg:w="1495"/><text x="81.0994%" y="159.50">lox`lox::runtime::en..</text></g><g><title>lox`lox::runtime::environment::Env::assign (1,211 samples, 10.69%)</title><rect x="83.3569%" y="133" width="10.6922%" height="15" fill="rgb(249,149,8)" fg:x="9441" fg:w="1211"/><text x="83.6069%" y="143.50">lox`lox::runtime..</text></g><g><title>lox`hashbrown::map::make_hash (121 samples, 1.07%)</title><rect x="92.9808%" y="117" width="1.0683%" height="15" fill="rgb(243,35,44)" fg:x="10531" fg:w="121"/><text x="93.2308%" y="127.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (44 samples, 0.39%)</title><rect x="93.6606%" y="101" width="0.3885%" height="15" fill="rgb(246,89,9)" fg:x="10608" fg:w="44"/><text x="93.9106%" y="111.50"></text></g><g><title>lox`core::ptr::drop_in_place&lt;lox::runtime::value::Value&gt; (31 samples, 0.27%)</title><rect x="95.6472%" y="133" width="0.2737%" height="15" fill="rgb(233,213,13)" fg:x="10833" fg:w="31"/><text x="95.8972%" y="143.50"></text></g><g><title>lox`lox::runtime::environment::EnvInner::fetch (7 samples, 0.06%)</title><rect x="95.9209%" y="133" width="0.0618%" height="15" fill="rgb(233,141,41)" fg:x="10864" fg:w="7"/><text x="96.1709%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (2 samples, 0.02%)</title><rect x="96.8303%" y="117" width="0.0177%" height="15" fill="rgb(239,167,4)" fg:x="10967" fg:w="2"/><text x="97.0803%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (3 samples, 0.03%)</title><rect x="96.8480%" y="117" width="0.0265%" height="15" fill="rgb(209,217,16)" fg:x="10969" fg:w="3"/><text x="97.0980%" y="127.50"></text></g><g><title>lox`DYLD-STUB$$memcmp (2 samples, 0.02%)</title><rect x="96.8744%" y="117" width="0.0177%" height="15" fill="rgb(219,88,35)" fg:x="10972" fg:w="2"/><text x="97.1244%" y="127.50"></text></g><g><title>lox`hashbrown::map::make_hash (4 samples, 0.04%)</title><rect x="96.8921%" y="117" width="0.0353%" height="15" fill="rgb(220,193,23)" fg:x="10974" fg:w="4"/><text x="97.1421%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (25 samples, 0.22%)</title><rect x="98.3048%" y="101" width="0.2207%" height="15" fill="rgb(230,90,52)" fg:x="11134" fg:w="25"/><text x="98.5548%" y="111.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.05%)</title><rect x="98.5255%" y="101" width="0.0530%" height="15" fill="rgb(252,106,19)" fg:x="11159" fg:w="6"/><text x="98.7755%" y="111.50"></text></g><g><title>all (11,326 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="11326"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (11,326 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(230,138,44)" fg:x="0" fg:w="11326"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>lox`main (11,325 samples, 99.99%)</title><rect x="0.0088%" y="309" width="99.9912%" height="15" fill="rgb(235,182,43)" fg:x="1" fg:w="11325"/><text x="0.2588%" y="319.50">lox`main</text></g><g><title>lox`std::rt::lang_start_internal (11,325 samples, 99.99%)</title><rect x="0.0088%" y="293" width="99.9912%" height="15" fill="rgb(242,16,51)" fg:x="1" fg:w="11325"/><text x="0.2588%" y="303.50">lox`std::rt::lang_start_internal</text></g><g><title>lox`std::rt::lang_start::_{{closure}} (11,325 samples, 99.99%)</title><rect x="0.0088%" y="277" width="99.9912%" height="15" fill="rgb(248,9,4)" fg:x="1" fg:w="11325"/><text x="0.2588%" y="287.50">lox`std::rt::lang_start::_{{closure}}</text></g><g><title>lox`std::sys_common::backtrace::__rust_begin_short_backtrace (11,325 samples, 99.99%)</title><rect x="0.0088%" y="261" width="99.9912%" height="15" fill="rgb(210,31,22)" fg:x="1" fg:w="11325"/><text x="0.2588%" y="271.50">lox`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lox`lox::main (11,325 samples, 99.99%)</title><rect x="0.0088%" y="245" width="99.9912%" height="15" fill="rgb(239,54,39)" fg:x="1" fg:w="11325"/><text x="0.2588%" y="255.50">lox`lox::main</text></g><g><title>lox`lox::Lox::run (11,325 samples, 99.99%)</title><rect x="0.0088%" y="229" width="99.9912%" height="15" fill="rgb(230,99,41)" fg:x="1" fg:w="11325"/><text x="0.2588%" y="239.50">lox`lox::Lox::run</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (11,205 samples, 98.93%)</title><rect x="1.0683%" y="213" width="98.9317%" height="15" fill="rgb(253,106,12)" fg:x="121" fg:w="11205"/><text x="1.3183%" y="223.50">lox`lox::runtime::interpreter::Interpreter::interpret</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (3,286 samples, 29.01%)</title><rect x="70.9871%" y="197" width="29.0129%" height="15" fill="rgb(213,46,41)" fg:x="8040" fg:w="3286"/><text x="71.2371%" y="207.50">lox`lox::runtime::interpreter::Interpreter::int..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::interpret (2,399 samples, 21.18%)</title><rect x="78.8186%" y="181" width="21.1814%" height="15" fill="rgb(215,133,35)" fg:x="8927" fg:w="2399"/><text x="79.0686%" y="191.50">lox`lox::runtime::interpreter::In..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (2,263 samples, 19.98%)</title><rect x="80.0194%" y="165" width="19.9806%" height="15" fill="rgb(213,28,5)" fg:x="9063" fg:w="2263"/><text x="80.2694%" y="175.50">lox`lox::runtime::interpreter::..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (674 samples, 5.95%)</title><rect x="94.0491%" y="149" width="5.9509%" height="15" fill="rgb(215,77,49)" fg:x="10652" fg:w="674"/><text x="94.2991%" y="159.50">lox`lox:..</text></g><g><title>lox`lox::runtime::interpreter::Interpreter::execute_expr (455 samples, 4.02%)</title><rect x="95.9827%" y="133" width="4.0173%" height="15" fill="rgb(248,100,22)" fg:x="10871" fg:w="455"/><text x="96.2327%" y="143.50">lox`..</text></g><g><title>lox`lox::runtime::environment::EnvInner::fetch (348 samples, 3.07%)</title><rect x="96.9274%" y="117" width="3.0726%" height="15" fill="rgb(208,67,9)" fg:x="10978" fg:w="348"/><text x="97.1774%" y="127.50">lox..</text></g><g><title>lox`hashbrown::map::make_hash (161 samples, 1.42%)</title><rect x="98.5785%" y="101" width="1.4215%" height="15" fill="rgb(219,133,21)" fg:x="11165" fg:w="161"/><text x="98.8285%" y="111.50"></text></g><g><title>lox`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (59 samples, 0.52%)</title><rect x="99.4791%" y="85" width="0.5209%" height="15" fill="rgb(246,46,29)" fg:x="11267" fg:w="59"/><text x="99.7291%" y="95.50"></text></g></svg></svg>